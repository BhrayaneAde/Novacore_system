#!/usr/bin/env python3
"""Script pour vider la base de donn√©es et relancer le seeder"""

import os
import logging
from sqlalchemy import text
from app.db.database import SessionLocal, engine, Base
from app.db import models

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def reset_database():
    """Vide compl√®tement la base de donn√©es et recr√©e les tables"""
    logger.info("üóëÔ∏è Suppression de toutes les donn√©es...")
    
    db = SessionLocal()
    try:
        # D√©sactiver les contraintes de cl√©s √©trang√®res
        db.execute(text("SET FOREIGN_KEY_CHECKS = 0"))
        
        # Supprimer les donn√©es table par table
        tables_to_clear = [
            'notifications', 'evaluations', 'leave_requests', 'tasks', 
            'contract_templates', 'employees', 'users', 'departments', 'companies'
        ]
        
        for table in tables_to_clear:
            try:
                db.execute(text(f"DELETE FROM {table}"))
                logger.info(f"‚úÖ Table {table} vid√©e")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur lors de la suppression de {table}: {e}")
        
        # R√©activer les contraintes
        db.execute(text("SET FOREIGN_KEY_CHECKS = 1"))
        db.commit()
        logger.info("‚úÖ Base de donn√©es vid√©e")
        
        # Supprimer le fichier marqueur du seeder
        seed_file = ".seed_completed"
        if os.path.exists(seed_file):
            os.remove(seed_file)
            logger.info("‚úÖ Fichier marqueur du seeder supprim√©")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    reset_database()
    
    # Relancer le seeder
    logger.info("üå± Relancement du seeder...")
    from seed import run_seeder
    run_seeder()