import logging
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError
from app.core.config import settings

logger = logging.getLogger(__name__)

def create_database_if_not_exists():
    """Cr√©e la base de donn√©es si elle n'existe pas d√©j√†"""
    try:
        # Extraire les informations de connexion depuis DATABASE_URL
        # Format: mysql+mysqlclient://user:password@host:port/database
        db_url = settings.DATABASE_URL
        
        # S√©parer l'URL pour obtenir les composants
        if "mysql" in db_url:
            # Cr√©er une connexion sans sp√©cifier la base de donn√©es
            base_url = db_url.rsplit('/', 1)[0]  # Enl√®ve le nom de la DB
            db_name = db_url.rsplit('/', 1)[1]   # R√©cup√®re le nom de la DB
            
            # Connexion au serveur MySQL sans base sp√©cifique
            temp_engine = create_engine(base_url + "/mysql")  # Utilise la DB syst√®me 'mysql'
            
            with temp_engine.connect() as conn:
                # V√©rifier si la base existe
                result = conn.execute(text(f"SHOW DATABASES LIKE '{db_name}'"))
                if not result.fetchone():
                    # Cr√©er la base de donn√©es
                    conn.execute(text(f"CREATE DATABASE {db_name}"))
                    conn.commit()
                    logger.info(f"‚úÖ Base de donn√©es '{db_name}' cr√©√©e avec succ√®s")
                else:
                    logger.info(f"‚ÑπÔ∏è Base de donn√©es '{db_name}' existe d√©j√†")
            
            temp_engine.dispose()
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es: {e}")
        logger.info("üí° Assurez-vous que MySQL est d√©marr√© et que les identifiants sont corrects")
        raise